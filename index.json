[{"content":"Recently, I had the challenge of setting up monitoring for all the Ingress hosts in our cluster - which are A LOT. Since new hosts are added or removed all the time, I tried to find a way to automate the whole thing so that I don\u0026rsquo;t have to worry about it too much once it is initially set up and I am reliably notified when a failure occurs.\nAfter some research I came to the conclusion that Prometheus is exactly what I am looking for. The Prometheus Operator makes it very easy to integrate the tool into a Kubernetes cluster, where it can access all Ingress objects via the API and create monitoring rules from them.\nInstalling Prometheus\u003e Installing Prometheus # The first thing we need to do is to install the kube-prometheus-stack Helm Chart:\nFor the helm chart to work the way we want we need to define some values in a myvalues.yaml file. In this example we have configured Slack as an receiver for our alerts. Other available options include email, Telegram or Pagerduty. You can also use custom webhooks for receivers that aren\u0026rsquo;t natively supported, e.g. MS Teams. For a full list of available options please consult the Prometheus documentation.\nIf you want to configure additional things such as Grafana to visualize your monitoring please consult the charts default values.yaml file to add your own custom values, but here is a basic myvalues.yaml that does the job:\nprometheus: prometheusSpec: podMonitorSelectorNilUsesHelmValues: false serviceMonitorSelectorNilUsesHelmValues: false ruleSelectorNilUsesHelmValues: false probeSelectorNilUsesHelmValues: false alertmanager: config: # ref.: https://github.com/prometheus/alertmanager/blob/main/doc/examples/simple.yml route: group_by: [\u0026#39;alertname\u0026#39;, \u0026#39;cluster\u0026#39;, \u0026#39;service\u0026#39;] # default receiver receiver: \u0026#39;null\u0026#39; routes: - receiver: \u0026#39;null\u0026#39; matchers: - alertname =~ \u0026#34;InfoInhibitor|Watchdog\u0026#34; - receiver: \u0026#39;slack\u0026#39; matchers: - severity =~ \u0026#34;warning|critical\u0026#34; receivers: - name: \u0026#39;null\u0026#39; - name: \u0026#39;slack\u0026#39; slack_configs: - send_resolved: true api_url: \u0026#39;\u0026#39; # \u0026lt;- Your Slack webhook URL goes here channel: \u0026#39;#slack-channel\u0026#39; If you are using Slack as a receiver I would also highly recommend you to check out this awesome alerting template: click me. We can inject the custom template file inside our Helm values via the alertmanager.templateFiles key. I am just not adding it in this example to keep it simple.\nOnce we\u0026rsquo;ve finished configuring our values we are ready to install the Chart:\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm install -f myvalues.yaml kube-prometheus-stack prometheus-community/kube-prometheus-stack ‚ö†Ô∏è In this example we will install kube-prometheus-stack in the default namespace but keep in mind that it is best practice to create a separate namespace for this.\nInstalling the Blackbox Exporter\u003e Installing the Blackbox Exporter # Now that Prometheus is up and running we need to install the Blackbox Exporter which will execute the actual probes and responds with metrics that Prometheus will be able to understand and scrape:\nhelm install prometheus-blackbox-exporter prometheus-community/prometheus-blackbox-exporter Configuring the Ingress probe\u003e Configuring the Ingress probe # After that comes the interesting part: We need to tell Prometheus what it should monitor. For our Ingress hosts we need to create a Probe manifest:\napiVersion: monitoring.coreos.com/v1 kind: Probe metadata: name: blackbox-kubernetes-ingress spec: jobName: blackbox-kubernetes-ingress interval: 30s module: http_2xx prober: url: prometheus-blackbox-exporter:9115 scheme: http path: /probe targets: ingress: namespaceSelector: any: true relabelingConfigs: - sourceLabels: [__param_target, __meta_kubernetes_ingress_annotation_monitoring_mycompany_com_health_probe_path] # custom Ingress Annotation: monitoring.mycompany.com/health-probe-path regex: (.*\\w)(\\/|);(.+) # matches target host as capture group $1, trailing slash (if applicable) as capture group $2 and health-probe-path annotation as capture group $3 replacement: $1$3 # combine target host and health-probe-path annotation without trailing slash of target (leading slash in annotation is needed, e.g. \u0026#34;/healthz\u0026#34;) targetLabel: __param_target Here we have defined that the target for our probe should be an Ingress and then we use the namespaceSelector to select every Ingress in any namespace. There is also a relabelingConfig included as an example. relabelingConfigs are a powerful tool to customize your probes - in this example we\u0026rsquo;ve added the possibility to use an Ingress annotation to alter our health probe path. E.g. if your application has implemented a health check at /healthz you can simply use the Ingress annotation monitoring.mycompany.com/health-probe-path: '/healthz' to tell Prometheus that this path should be used instead of the Ingress root path. More information about relabelingConfigs can be found here.\nCreating the Alert Rule\u003e Creating the Alert Rule # Last but not least we need to tell Prometheus that it should create an alert that will be sent to our receiver if the probe fails:\napiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: ingress-probe-failure spec: groups: - name: ingress-probe-failure rules: - alert: IngressProbeFailure expr: probe_success{job=\u0026#34;blackbox-kubernetes-ingress\u0026#34;} == 0 for: 5m labels: severity: warning annotations: summary: \u0026#34;Ingress Host is down!\u0026#34; description: \u0026#34;The Ingress Host {{ $labels.instance }} ({{ $labels.ingress }} / {{ $labels.namespace }}) failed to respond with a valid status code for at least 5 minutes.\u0026#34; Now once an Ingress probe is unhealthy for at least 5 minutes it will fire an alert with severity warning which is routed to our Slack receiver as previously configured.\nPlease keep in mind that there are a lot more things you can configure \u0026amp; do in Prometheus and we are barely scratching the surface here, but that would be too much for this blog post.\n","date":"2023-03-31","permalink":"/posts/how-to-automate-your-kubernetes-ingress-monitoring-with-prometheus/","section":"Posts","summary":"Recently, I had the challenge of setting up monitoring for all the Ingress hosts in our cluster - which are A LOT. Since new hosts are added or removed all the time, I tried to find a way to automate the whole thing so that I don\u0026rsquo;t have to worry about it too much once it is initially set up and I am reliably notified when a failure occurs.","title":"How to automate your Kubernetes Ingress monitoring with Prometheus"},{"content":"","date":"2023-03-31","permalink":"/tags/kubernetes/","section":"Tags","summary":"","title":"Kubernetes"},{"content":"","date":"2023-03-31","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"2023-03-31","permalink":"/tags/prometheus/","section":"Tags","summary":"","title":"Prometheus"},{"content":"","date":"2023-03-31","permalink":"/","section":"Simon Czech","summary":"","title":"Simon Czech"},{"content":"","date":"2023-03-31","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"2023-01-26","permalink":"/tags/first/","section":"Tags","summary":"","title":"first"},{"content":"Welcome on my blog! üëã\nI\u0026rsquo;m not quite sure yet what I want to post here, but at least I have a blog now üòó\nShoutout to Hugo and Blowfish which made this site possible.\n","date":"2023-01-26","permalink":"/posts/first-blog-entry/","section":"Posts","summary":"Welcome on my blog! üëã\nI\u0026rsquo;m not quite sure yet what I want to post here, but at least I have a blog now üòó\nShoutout to Hugo and Blowfish which made this site possible.","title":"First blog entry üéâ"},{"content":"","date":"0001-01-01","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"0001-01-01","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"0001-01-01","permalink":"/series/","section":"Series","summary":"","title":"Series"}]